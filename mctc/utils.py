# AUTOGENERATED! DO NOT EDIT! File to edit: notebooks/00_utils.ipynb (unless otherwise specified).

__all__ = ['to_np', 'zero_grad', 'timed', 'benchmark_fwd_bwd', 'report', 'load_cupy_module']

# Cell
import torch
import numpy as np

# Cell
def to_np(x):
    return x.clone().detach().cpu().numpy()

def zero_grad(*xs):
    return [x.grad.zero_() for x in xs if hasattr(x, 'grad') and x.grad is not None]

# Cell
def timed(func, *inputs):
    start, end = [torch.cuda.Event(enable_timing=True) for _ in range(2)]
    start.record(); output = func(*inputs); end.record()
    torch.cuda.synchronize()
    return output, start.elapsed_time(end)

def benchmark_fwd_bwd(fwd_impl, *inputs, warmup=5, nloops=20):
    def fwd_bwd_times(fwd_impl, *inputs):
        output, fwd_time = timed(fwd_impl, *inputs)
        _, bwd_time = timed(output.backward)
        zero_grad(*inputs)
        return (fwd_time, bwd_time)
    [fwd_bwd_times(fwd_impl, *inputs) for _ in range(warmup)]
    fwd_times, bwd_times = map(np.array, zip(*[fwd_bwd_times(fwd_impl, *inputs) for _ in range(nloops)]))
    return {'fwd': fwd_times, 'bwd': bwd_times, 'tot': fwd_times+bwd_times}

def report(times):
    for k,v in times.items():
        print(f'{k}: {v.mean():.2f}ms ({v.min():.2f}-{v.max():.2f}ms)')

# Cell
def load_cupy_module(fname, **kwargs):
    import cupy as cp
    with open(fname) as f:
        code = f.read()
    macros = [f'#define {k} {v}' for k,v in kwargs.items()]
    code = '\n'.join(macros + [code])
    return cp.RawModule(code=code)